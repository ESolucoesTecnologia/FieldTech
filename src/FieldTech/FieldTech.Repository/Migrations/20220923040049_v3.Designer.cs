// <auto-generated />
using System;
using FieldTech.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FieldTech.Repository.Migrations
{
    [DbContext(typeof(FieldTechContext))]
    [Migration("20220923040049_v3")]
    partial class v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FieldTech.Domain.Field.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TecnicoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TecnicoId");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Tecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Nascimento")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OrgaoEmissor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rg")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Tecnico", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Telefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ddd")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("TecnicoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TecnicoId");

                    b.ToTable("Telefone", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.Fornecedor.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.Ordem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Dt_Acionamento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Agendamento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Escopo")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Projeto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Ordem", (string)null);
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.OrdemDetalhe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_HoraFimAtividade")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_HoraInicioAtividade")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OrdemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Qtd_HoraExcedente")
                        .HasColumnType("float");

                    b.Property<double>("Qtd_Km")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Atividade")
                        .HasColumnType("float");

                    b.Property<double>("Vl_HoraExcedente")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Hospedagem")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Km")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Material")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Pedagio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrdemId");

                    b.ToTable("OrdemDetalhe");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.OrdemDetalheTecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dt_Atualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_HoraFimAtividade")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_HoraInicioAtividade")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dt_Inclusao")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OrdemDetalheId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Qtd_HoraExcedente")
                        .HasColumnType("float");

                    b.Property<double>("Qtd_Km")
                        .HasColumnType("float");

                    b.Property<Guid>("TecnicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Vl_Atividade")
                        .HasColumnType("float");

                    b.Property<double>("Vl_HoraExcedente")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Hospedagem")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Km")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Material")
                        .HasColumnType("float");

                    b.Property<double>("Vl_Pedagio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrdemDetalheId");

                    b.HasIndex("TecnicoId");

                    b.ToTable("OrdemDetalheTecnico");
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Email", b =>
                {
                    b.HasOne("FieldTech.Domain.Field.Tecnico", null)
                        .WithMany("EmailList")
                        .HasForeignKey("TecnicoId");

                    b.OwnsOne("FieldTech.Domain.Field.ValueObjects.Email", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("EmailId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("varchar")
                                .HasColumnName("Endereco");

                            b1.HasKey("EmailId");

                            b1.ToTable("Email");

                            b1.WithOwner()
                                .HasForeignKey("EmailId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Tecnico", b =>
                {
                    b.HasOne("FieldTech.Domain.Field.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FieldTech.Domain.Field.ValueObjects.CPF", "CpfCnpj", b1 =>
                        {
                            b1.Property<Guid>("TecnicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CpfCnpj");

                            b1.HasKey("TecnicoId");

                            b1.ToTable("Tecnico");

                            b1.WithOwner()
                                .HasForeignKey("TecnicoId");
                        });

                    b.Navigation("CpfCnpj")
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Telefone", b =>
                {
                    b.HasOne("FieldTech.Domain.Field.Tecnico", null)
                        .WithMany("TelefoneList")
                        .HasForeignKey("TecnicoId");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.Ordem", b =>
                {
                    b.HasOne("FieldTech.Domain.Fornecedor.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.OrdemDetalhe", b =>
                {
                    b.HasOne("FieldTech.Domain.OrdemServico.Ordem", null)
                        .WithMany("OrdemDetalheList")
                        .HasForeignKey("OrdemId");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.OrdemDetalheTecnico", b =>
                {
                    b.HasOne("FieldTech.Domain.OrdemServico.OrdemDetalhe", null)
                        .WithMany("OrdemDetalheTecnicoList")
                        .HasForeignKey("OrdemDetalheId");

                    b.HasOne("FieldTech.Domain.Field.Tecnico", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("FieldTech.Domain.Field.Tecnico", b =>
                {
                    b.Navigation("EmailList");

                    b.Navigation("TelefoneList");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.Ordem", b =>
                {
                    b.Navigation("OrdemDetalheList");
                });

            modelBuilder.Entity("FieldTech.Domain.OrdemServico.OrdemDetalhe", b =>
                {
                    b.Navigation("OrdemDetalheTecnicoList");
                });
#pragma warning restore 612, 618
        }
    }
}
